{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "adminUsername": {
            "type": "string",
            "defaultValue": "adminuser",
            "metadata": {
                "description": "Username for all the Virtual Machines."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "defaultValue": "Password@1234",
            "metadata": {
                "description": "Password for all the Virtual Machines."
            }
        },
        "domainName": {
            "type": "string",
            "defaultValue": "sysgainiot.com",
            "metadata": {
                "description": "The FQDN of the Active Directory Domain to be created on VM"
            }
        },
        "azureAccountUsername": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Username for Azure Account"
            }
        },
        "azureAccountPassword": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "Password for Azure Account"
            }
        },
        "tenantID": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "tenantID for Azure Account"
            }
        },
        "applicationName": {
            "type": "string",
            "defaultValue": "iottest9",
            "metadata": {
                "decription": "Application name for Active Directory"
            }
        },
        "sqlAdministratorLogin": {
            "type": "string",
            "defaultValue": "sqluser",
            "metadata": {
                "description": "The admin user of the SQL Server"
            }
        },
        "sqlAdministratorLoginPassword": {
            "type": "securestring",
            "defaultValue": "Password@1234",
            "metadata": {
                "description": "The password of the admin user of the SQL Server"
            }
        },
        "skuName": {
            "type": "string",
            "defaultValue": "S1",
            "allowedValues": [
                "D1",
                "B1",
                "B2",
                "B3",
                "S1",
                "S2",
                "S3",
                "P1",
                "P2",
                "P3",
                "P4"
            ],
            "metadata": {
                "description": "Describes plan's pricing tier and instance size. Check details at https://azure.microsoft.com/en-us/pricing/details/app-service/"
            }
        },
        "skuCapacity": {
            "type": "int",
            "defaultValue": 1,
            "minValue": 1,
            "metadata": {
                "description": "Describes plan's instance count"
            }
        },
        "hostingPlanName": {
            "type": "string",
            "defaultValue": "AppServPlan",
            "metadata": {
                "description": "Describes Hosting plan's name"
            }
        },
        "apiServerName": {
            "type": "string",
            "defaultValue": "apiserver",
            "metadata": {
                "description": "Describes API Server name which should be unique"
            }
        },
        "emailHost": {
            "type": "string",
            "defaultValue": "ermhost",
            "metadata": {
                "description": "Describes the host name for sending email notifications"
            }
        },
        "emailHostPort": {
            "type": "string",
            "defaultValue": "25",
            "metadata": {
                "description": "Describes the port number for email host"
            }
        },
        "senderEmail": {
            "type": "string",
            "defaultValue": "ermhost@ermdeploy.com",
            "metadata": {
                "description": "Describes the email ID of the sender for email notifications"
            }
        },
        "senderEmailPassword": {
            "type": "string",
            "defaultValue": "Password@1234",
            "metadata": {
                "descrition": "Describes the password for sender email ID for email notifications"
            }
        },
        "b2cTenant": {
            "type": "string",
            "defaultValue": "testiot22.onmicrosoft.com",
            "metadata": {
                "description": "Describes B2C Tenant Name Directory"
            }
        },
        "b2cClientId": {
            "type": "string",
            "defaultValue": "f5e97d3c-aa1e-45a5-b1cf-770b4b43af7d",
            "metadata": {
                "description": "Describes the client Id of the application registered in B2C Directory"
            }
        },
        "b2cClientSecret": {
            "type": "string",
            "defaultValue": "7L5k!]Ajv7Z^-23Q",
            "metadata": {
                "description": "Describes the Client secret of the application registered in B2C Directory"
            }
        },
        "b2cSignUpPolicyId": {
            "type": "string",
            "defaultValue": "B2C_1_suppolicy2",
            "metadata": {
                "description": "Describes the B2C Sign Up policy"
            }
        },
        "b2cSignInPolicyId": {
            "type": "string",
            "defaultValue": "B2C_1_sinpolicy2",
            "metadata": {
                "description": "Describes the B2C Sign in policy"
            }
        },
        "b2cEditProfilePolicyId": {
            "type": "string",
            "defaultValue": "B2C_1_peditpolicy2",
            "metadata": {
                "description": "Describes the B2C Profile Editing policy"
            }
        },
        "b2cChangePasswordPolicy": {
            "type": "string",
            "defaultValue": "B2C_1_cpasspolicy",
            "metadata": {
                "description": "Describes the B2C Change Password policy"
            }
        },
        "MLskuName": {
            "type": "string",
            "defaultValue": "S1",
            "allowedValues": [
                "S1",
                "S2",
                "S3"
            ],
            "metadata": {
                "description": "Pricing tier for Workspace"
            }
        }
    },
    "variables": {
        "apiVersions": {
            "deploymentApiVersion": "2016-02-01",
            "computeApiVersion": "2016-04-30-preview",
            "networkApiVersion": "2016-09-01",
            "storageApiVersion": "2016-01-01",
            "sqlServerApiVersion": "2015-05-01-preview",
            "sqlDBApiVersion": "2014-04-01-preview",
            "workspaceApiVersion": "2016-04-01",
            "planApiVersion": "2016-05-01-preview",
            "webApiVersion": "2016-03-01",
            "webApiVersion1": "2015-08-01",
            "webApiVersion2": "2014-08-01-preview"
        },
        "networkSettings": {
            "location": "[resourceGroup().location]",
            "networkApiVersion": "2016-03-30",
            "virtualNetworkName": "MyVNET",
            "addressPrefix": "10.0.0.0/16",
            "subnet1Name": "subnet1",
            "subnet1Prefix": "10.0.0.0/24",
            "subnet2Name": "subnet2",
            "subnet2Prefix": "10.0.1.0/24",
            "subnet3Name": "subnet3",
            "subnet3Prefix": "10.0.2.0/24",
            "subnet4Name": "subnet4",
            "subnet4Prefix": "10.0.3.0/24",
            "subnet5Name": "subnet5",
            "subnet5Prefix": "10.0.4.0/24"
        },
        "bastionServerSettings": {
            "location": "[resourceGroup().location]",
            "bastionVMName": "bastionServer",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]",
            "bastionNic": "bastion-nic",
            "bastionDiagStgAcnt": "[concat('bastionstrg',variables('suffix'))]",
            "bastionVMSize": "Standard_DS1_v2",
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2012-R2-Datacenter",
            "version": "latest",
            "storageAccountType": "[variables('storageAccountType')]",
            "diagStorageAccountType": "Standard_LRS",
            "publicIpAddressName": "bastion-pip",
            "networkSecurityGroupName": "bastion-nsg",
            "publicIpAddressType": "Dynamic",
            "bastionDnsLabelPrefix": "[concat('bastionserver',variables('suffix'))]",
            "fileUris": "[concat(variables('baseUrl'),'scripts/psscript.ps1')]",
            "scriptFileName": "psscript.ps1",
            "domainName": "[parameters('domainName')]",
            "Username": "[parameters('adminUsername')]",
            "Password": "[parameters('adminPassword')]",
            "wsVmName": "chefworkstation",
            "wsNsg": "ws-client-nsg",
            "wsNic": "ws-client-nic",
            "wsPublicIpName": "ws-publicip",
            "VMSize": "Standard_DS2_v2",
            "wsClientDns": "[concat('wsclient',substring(variables('prefix') ,0 ,5))]",
            "powerBIUrl":"[concat(variables('baseUrl'),'nested/powerbiinstall.json')]",
            "powerBIScriptUrl":"[concat(variables('baseUrl'),'scripts/powerbidesktop.ps1')]",
            "powerBITemplatesUrl":"[concat(variables('dscScriptUrl'),'/powerBItemplates/PowerBI_Templates.zip')]",
            "powerBIDesktopUrl":"https://projectiot.blob.core.windows.net/iotp2/PBIDesktop_x64.msi",
            "workstationSetup": "[concat(variables('baseUrl'),'scripts/workstationsetup1.ps1')]",
            "workstationextensionurl": "[concat(variables('baseUrl'),'nested/workstation-extension.json')]",
            "workstationSetupUrl2": "[concat(variables('baseUrl'),'scripts/workstationsetup2.ps1')]",
            "domainJoinUrl": "[concat(variables('baseUrl'),'nested/domainjoin.json')]"
        },
        "MCSModules": {
            "location": "[resourceGroup().location]",
            "adNicName": "adNic",
            "splunkNicName": "splunkNic",
            "splunkNsg": "splunkNsg",
            "adNicIPAddress": "10.0.1.4",
            "chefAutomateIPAddress": "10.0.1.6",
            "adVMName": "adServer",
            "splunkVMName": "splunkServer",
            "splunkExtensionName": "splunkExtension",
            "typeHandlerVersion": "1.5",
            "splunkImagePublisher": "splunk",
            "splunkImageOffer": "splunk-enterprise-base-image",
            "splunkImageSKU": "splunk-on-ubuntu-14-04-lts",
            "splunkImageVersion": "1.1.1",
            "Username": "[parameters('adminUsername')]",
            "Password": "[parameters('adminPassword')]",
            "domainName": "[parameters('domainName')]",
            "adExtensionName": "CreateADForest",
            "chefAutoNsg": "chefauto-nsg",
            "chefAutoNic": "chefauto-nic",
            "chefAutoDns": "[concat('chefauto',substring(variables('prefix') ,0 ,5))]",
            "scriptFileName": "psscript.ps1",
            "dnsPrefix": "[concat('adserver',variables('suffix'))]",
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2016-Datacenter",
            "version": "latest",
            "chefImagePublisher": "chef-software",
            "chefImageOffer": "chef-automate",
            "chefImageSKU": "byol",
            "chefImageVersion": "latest",
            "chefAutoVmName": "chefautomate",
            "firstname": "chefautomate",
            "lastname": "user",
            "orguser": "orguser",
            "mailid": "orguser@gmail.com",
            "rubyPath": "/opt/chef-marketplace/embedded/bin/ruby",
            "VMSize": "Standard_DS2_v2",
            "automateLicenseUri": "",
            "storageAccountType": "Premium_LRS",
            "adNetworkSecurityGroupName": "adnsg",
            "adstorageAccountName": "[concat('adstrg',variables('suffix'))]",
            "diskCreateOption": "empty",
            "diskSizeGB": "1023",
            "databaseOption": "new",
            "licenseMode": "10",
            "azureAccountUsername": "[parameters('azureAccountUsername')]",
            "azureAccountPassword": "[parameters('azureAccountPassword')]",
            "tenantID": "[parameters('tenantID')]",
            "applicationName": "[parameters('applicationName')]",
            "uniqueString": "[variables('uniqueString')]",
            "appCreationURL": "[concat(variables('baseUrl'),'nested/appCreation.json')]",
            "appScriptUrl": "[concat(variables('baseUrl'),'scripts/powerBIApp.ps1')]",
            "ManagerAddress": "[concat(variables('chefPublicIPDomainName'),'.',resourceGroup().location,'.cloudapp.azure.com')]",
            "azuresqlUrl": "[concat(variables('baseUrl'),'/nested/database-new.json')]",
            "fileUris": "[concat(variables('baseUrl'),'scripts/psscript.ps1')]",
            "commandToExecute": "[concat('bash node-setup.sh', ' -r ', variables('splunkServerRole'), ' -p ', parameters('adminPassword'))]",
            "splunkScriptsUrl": "[concat(variables('baseUrl'),'scripts/node-setup.sh')]",
            "dscScriptUrl": "[variables('dscScriptUrl')]",
            "updateVnetDnsUrl": "[concat(variables('baseUrl'), 'nested/vnetdns.json')]",
            "chefAutoScriptUrl1": "[concat(variables('baseUrl'),'scripts/automate_setup.rb')]"
        },
        "PIAFSQLSettings": {
            "location": "[resourceGroup().location]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]",
            "networkInterfaceName": "sqlNic",
            "networkSecurityGroupName": "sqlNsg",
            "publicIpAddressName": "sqlpip",
            "sqlAuthenticationLogin": "[parameters('sqlAdministratorLogin')]",
            "sqlAuthenticationPassword": "[parameters('sqlAdministratorLoginPassword')]",
            "sqlStorageAccountName": "[concat(uniquestring(resourceGroup().id), 'sqlserver')]",
            "sqlservername": "PIAFSQLServer",
            "storageAccountType": "Premium_LRS",
            "publisher": "MicrosoftSQLServer",
            "offer": "SQL2016SP1-WS2016",
            "sku": "Express",
            "version": "latest",
            "vmSize": "Standard_DS1_v2",
            "sqlConnectivityType": "Private",
            "sqlPrivateIPAddress": "10.0.2.4",
            "sqlStorageDisksCount": "1",
            "sqlStorageWorkloadType": "GENERAL",
            "sqlAutopatchingDayOfWeek": "Sunday",
            "sqlAutopatchingStartHour": "2",
            "sqlAutopatchingWindowDuration": "60",
            "sqlStorageDeploymentToken": "456",
            "scriptFileName": "psscript.ps1",
            "scriptFileName2": "defaultdb.ps1",
            "scriptFileName3": "simulatorsetup.ps1",
            "domainName": "[parameters('domainName')]",
            "Username": "[parameters('adminUsername')]",
            "Password": "[parameters('adminPassword')]",
            "baseUrl": "[variables('baseUrl')]",
            "fileUris": "[concat(variables('baseUrl'),'scripts/psscript.ps1')]",
            "fileUris2": "[concat(variables('baseUrl'),'scripts/defaultdb.ps1')]",
            "fileUris3": "[concat(variables('baseUrl'),'scripts/simulatorsetup.ps1')]",
            "sqlQueryUrl": "[concat(variables('baseUrl'),'scripts/SQLQuery2.sql')]",
            "piserverscript": "[concat(variables('baseUrl'),'scripts/PiServerSQLscript.sql')]",
            "databaseName": "iottestdb",
            "simulatorUrl": "https://projectiot.blob.core.windows.net/iotp2/SimulatorSetup.msi",
            "dataserviceUrl": "https://projectiot.blob.core.windows.net/iotp2/DataServiceSetup.msi",
            "PIWebApiSimulatorUrl": "https://projectiot.blob.core.windows.net/iotp2/PiWebAPISimulatorSetup.msi"
        },
        "PIDAServersettings": {
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]",
            "location": "[resourceGroup().location]",
            "PIDAVMName": "PIDAVMServer",
            "PIDANic": "PIDAVMNic",
            "PIDANetworkSecurityGroupName": "PIDANsg",
            "PIDADiagStgAcnt": "[concat(uniquestring(resourceGroup().id), 'pidavm')]",
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2012-R2-Datacenter",
            "version": "latest",
            "PIDAVMSize": "Standard_DS1_v2",
            "storageAccountType": "[variables('storageAccountType')]",
            "diagStorageAccountType": "Standard_LRS",
            "PIDAPrivateIPAddress": "10.0.3.4",
            "scriptFileName": "psscript.ps1",
            "domainName": "[parameters('domainName')]",
            "fileUris": "[concat(variables('baseUrl'),'scripts/psscript.ps1')]",
            "Username": "[parameters('adminUsername')]",
            "Password": "[parameters('adminPassword')]",
            "domainJoinUrl": "[concat(variables('baseUrl'),'nested/domainjoin.json')]"
        },
        "PIBAServersettings": {
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]",
            "location": "[resourceGroup().location]",
            "PIBAVMName": "PIBAVMServer",
            "PIBANic": "PIBAVMNic",
            "PIBANetworkSecurityGroupName": "PIBANsg",
            "PIBADiagStgAcnt": "[concat(uniquestring(resourceGroup().id), 'pibavm')]",
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2012-R2-Datacenter",
            "version": "latest",
            "PIBAVMSize": "Standard_DS4_v2",
            "storageAccountType": "[variables('storageAccountType')]",
            "diagStorageAccountType": "Standard_LRS",
            "PIBAPrivateIPAddress": "10.0.4.4",
            "scriptFileName": "psscript.ps1",
            "domainName": "[parameters('domainName')]",
            "fileUris": "[concat(variables('baseUrl'),'scripts/psscript.ps1')]",
            "Username": "[parameters('adminUsername')]",
            "Password": "[parameters('adminPassword')]",
            "domainJoinUrl": "[concat(variables('baseUrl'),'nested/domainjoin.json')]"
        },
        "AzureSQL": {
            "location": "[resourceGroup().location]",
            "sqlAuthenticationLogin": "[parameters('sqlAdministratorLogin')]",
            "sqlAuthenticationPassword": "[parameters('sqlAdministratorLoginPassword')]",
            "collation": "SQL_Latin1_General_CP1_CI_AS",
            "databaseName": "azuredb",
            "edition": "Standard",
            "requestedServiceObjectiveName": "S2",
            "maxSizeBytes": "268435456000",
            "serverName": "[concat('sqlserver', uniqueString(resourceGroup().id))]",
            "storageKeyType": "SharedAccessKey",
            "storageKey": "?",
            "storageUri": "https://projectiot.blob.core.windows.net/iotp2/EnergyManagement.bacpac"
        },
        "MLSettings": {
            "location": "South Central US",
            "workspaceName": "workspace",
            "MLskuName": "[parameters('MLskuName')]",
            "MLStorageName": "[concat('mlstr', uniqueString(resourceGroup().id))]"
        },
        "webSiteSettings": {
            "location": "[resourceGroup().location]",
            "jobCollectionName": "[concat('myjob', uniqueString(resourceGroup().id))]",
            "webjobStorageName": "[concat('webjobstr', uniqueString(resourceGroup().id))]",
            "webjobStorageType": "Standard_LRS",
            "hostingPlanName": "[parameters('hostingPlanName')]",
            "skuName": "[parameters('skuName')]",
            "skuCapacity": "[parameters('skuCapacity')]",
            "webSiteName": "[concat(parameters('applicationName'),variables('suffix'))]",
            "WebAppPackageURI": "[concat(variables('WebAppDeployPackageURI'), variables('SasToken'))]",
            "RestServerDeployPackageURI": "[concat(variables('RestServerDeployPackageURI'), variables('SasToken'))]",
            "BlobconnectionString": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('DeployStorageAccountName'),';AccountKey=',variables('DeployStorageAccountKey'))]",
            "apiServerName": "[concat(parameters('apiServerName'),variables('suffix'))]",
            "b2cApplicationId": "[parameters('b2cClientId')]",
            "signInPolicyName": "[parameters('b2cSignInPolicyId')]",
            "signInSignUpPolicyName": "[parameters('b2cSignUpPolicyId')]",
            "editProfilePolicyName": "[parameters('b2cEditProfilePolicyId')]",
            "tenantName": "[parameters('b2cTenant')]",
            "b2cClientSecret": "[parameters('b2cClientSecret')]",
            "b2cChangePasswordPolicy": "[parameters('b2cChangePasswordPolicy')]",
            "emailHost": "[parameters('emailHost')]",
            "emailHostPort": "[parameters('emailHostPort')]",
            "senderEmail": "[parameters('senderEmail')]",
            "senderEmailPassword": "[parameters('senderEmailPassword')]",
            "websiteFullAddress": "[variables('websiteFullAddress')]",
            "b2cAadInstance": "https://login.microsoftonline.com/{0}/v2.0/.well-known/openid-configuration?p={1}",
            "notificationIcon": "./csu/Assets/logo.png",
            "anomalyThreshold": "0.6",
            "meterKWHCost": "0.04",
            "notificationClickAction": "[variables('websiteFullAddress')]",
            "PowerGridEntities": "[concat('metadata=res://*/Entities.PowergridModel.csdl|res://*/Entities.PowergridModel.ssdl|res://*/Entities.PowergridModel.msl;provider=System.Data.SqlClient;provider connection string=\"data source=',variables('AzureSQL').serverName,'.database.windows.net;initial catalog=',variables('AzureSQL').databaseName,';persist security info=True;user id=',parameters('sqlAdministratorLogin'),';password=',parameters('sqlAdministratorLoginPassword'),';multipleactiveresultsets=True;application name=EntityFramework\"')]"
        },
        "uniqueString": "aug",
        "websiteFullAddress": "[concat('https://',parameters('applicationName'),variables('uniqueString'),'.azurewebsites.net/')]",
        "DeployStorageAccountName": "releasemtr",
        "DeployStorageAccountKey": "",
        "WebAppDeployPackageURI": "https://projectiot.blob.core.windows.net/iotp2/CSUWebApp.zip",
        "RestServerDeployPackageURI": "https://projectiot.blob.core.windows.net/iotp2/RestService.zip",
        "SasToken": "?",
        "chefPublicIPDomainName": "[concat('publicdnschef',variables('suffix'))]",
        "DNSServerAddress": "10.0.2.4",
        "splunkServerRole": "splunk_server",
        "storageAccountType": "Premium_LRS",
        "baseUrl": "https://raw.githubusercontent.com/sysgain/iot-automation/main/",
        "dscScriptUrl": "https://github.com/sysgain/iot-automation/raw/main",
        "prefix": "[uniqueString(resourceGroup().id)]",
        "deploymentApiVersion": "2016-02-01",
        "suffix": "[substring(uniqueString(resourceGroup().id), 0, 5)]"
    },
    "resources": [
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('networkSettings').virtualNetworkName]",
            "apiVersion": "[variables('apiVersions').networkApiVersion]",
            "location": "[variables('networkSettings').location]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('networkSettings').addressPrefix]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('networkSettings').subnet1Name]",
                        "properties": {
                            "addressPrefix": "[variables('networkSettings').subnet1Prefix]"
                        }
                    },
                    {
                        "name": "[variables('networkSettings').subnet2Name]",
                        "properties": {
                            "addressPrefix": "[variables('networkSettings').subnet2Prefix]"
                        }
                    },
                    {
                        "name": "[variables('networkSettings').subnet3Name]",
                        "properties": {
                            "addressPrefix": "[variables('networkSettings').subnet3Prefix]"
                        }
                    },
                    {
                        "name": "[variables('networkSettings').subnet4Name]",
                        "properties": {
                            "addressPrefix": "[variables('networkSettings').subnet4Prefix]"
                        }
                    },
                    {
                        "name": "[variables('networkSettings').subnet5Name]",
                        "properties": {
                            "addressPrefix": "[variables('networkSettings').subnet5Prefix]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "MCSModules",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/',variables('networkSettings').virtualNetworkName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('baseUrl'), 'nested/mcs.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "MCSModules": {
                        "value": "[variables('MCSModules')]"
                    },
                    "networkSettings": {
                        "value": "[variables('networkSettings')]"
                    },
                    "apiVersions": {
                        "value": "[variables('apiVersions')]"
                    },
                    "DNSServerAddress": {
                        "value": [
                            "[variables('DNSServerAddress')]"
                        ]
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "PIComponents",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "dependsOn": [
                "MCSModules"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('baseUrl'), 'nested/piComponents.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "PIAFSQLSettings": {
                        "value": "[variables('PIAFSQLSettings')]"
                    },
                    "PIDAServersettings": {
                        "value": "[variables('PIDAServersettings')]"
                    },
                    "PIBAServersettings": {
                        "value": "[variables('PIBAServersettings')]"
                    },
                    "networkSettings": {
                        "value": "[variables('networkSettings')]"
                    },
                    "apiVersions": {
                        "value": "[variables('apiVersions')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "BastionHost",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "dependsOn": [
                "PIComponents"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('baseUrl'), 'nested/bastionServer.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "bastionServerSettings": {
                        "value": "[variables('bastionServerSettings')]"
                    },
                    "networkSettings": {
                        "value": "[variables('networkSettings')]"
                    },
                    "apiVersions": {
                        "value": "[variables('apiVersions')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "AppComponents",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "dependsOn": [
                "PIComponents"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('baseUrl'), 'nested/appComponents.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "AzureSQL": {
                        "value": "[variables('AzureSQL')]"
                    },
                    "MLSettings": {
                        "value": "[variables('MLSettings')]"
                    },
                    "webSiteSettings": {
                        "value": "[variables('webSiteSettings')]"
                    },
                    "apiVersions": {
                        "value": "[variables('apiVersions')]"
                    }
                }
            }
        }
    ],
    "outputs": {
        "adminUsername": {
            "type": "string",
            "value": "[parameters('adminUserName')]"
        },
        "adminPassword": {
            "type": "string",
            "value": "[parameters('adminPassword')]"
        },
        "bastionFQDN": {
            "type": "string",
            "value": "[reference('BastionHost').outputs.bastionFQDN.value]"
        },
        "adServerIP": {
            "type": "string",
            "value": "[variables('MCSModules').adNicIPAddress]"
        },
        "PIAFSQLServerIP": {
            "type": "string",
            "value": "[variables('PIAFSQLSettings').sqlPrivateIPAddress]"
        },
        "chefAutomateIPAddress": {
            "type": "string",
            "value": "[variables('MCSModules').chefAutomateIPAddress]"
        },
        "PIDAServerIP": {
            "type": "string",
            "value": "[variables('PIDAServersettings').PIDAPrivateIPAddress]"
        },
        "PIBAServerIP": {
            "type": "string",
            "value": "[variables('PIBAServersettings').PIBAPrivateIPAddress]"
        }
    }
}