{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "adminUsername": {
            "type": "string",
            "defaultValue": "adminuser",
            "metadata": {
                "description": "Username for all the Virtual Machines(for linux and Windows), make a note of the Username this will be used further"
            }
        },
        "adminPassword": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "Password for Windows Virtual Machines,make a note of the Password this will be used further."
            }
        },
        "authTypeForLinuxServers": {
            "type": "string",
            "allowedValues": [
                "sshPublicKey"
            ],
            "metadata": {
                "description": "Authentication type for linux Virtual Machines"
            }
        },
        "adminSSHKey": {
            "type": "string",
            "defaultValue": "ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEArC+q1gGbzrUd0jAFScbjEui+OBRdIIq+tF6DDPeO1qP7y4v3u7tdttxOdS7QC8OmXe6X8Y8LTp+SHJeYBl8n3KsE1Iy06+u0S1Cu2CLu90cQmIcpY5I/4BT+4ylPqMtYox3CQPgujzknKlC1vT+j5aoZMKoRvInZKeapLhbOi+lgq51LJNtbM+TPudtOcODdi5DWtTI66vDMAK3V7gQptUC+kbBgjPzUgT3srYsppbDBbzxXnHryGxU/otphKDOOibX2bFCU25Tch7izCJZ2ACa39JoahRoC28Ed0Q0537Su2YVcgPMm8deeA+v2ccF9PT3UsWwfwVkV7FS2RWj8Lw== rsa-key-20170814",
            "metadata": {
                "description": "admin ssh key for linux Virtual Machines"
            }
        },
        "domainName": {
            "type": "string",
            "defaultValue": "sysgainiot.com",
            "metadata": {
                "description": "The FQDN of the Active Directory Domain to be created on VM"
            }
        },
        "FortiGateName": {
            "type": "string",
            "defaultValue": "fortigate",
            "metadata": {
                "description": "Name for FortiGate virtual appliance."
            }
        },
        "websiteName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "decription": "Website name"
            }
        },
        "sqlAdministratorLogin": {
            "type": "string",
            "defaultValue": "sqluser",
            "metadata": {
                "description": "The SQL authentication admin user of the SQL Server, make a note of Username this will be used further"
            }
        },
        "sqlAdministratorLoginPassword": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "The SQL authentication password of the admin user of the SQL Server, make a note of the Password this will be used further"
            }
        },
        "skuName": {
            "type": "string",
            "defaultValue": "S1",
            "allowedValues": [
                "D1",
                "B1",
                "B2",
                "B3",
                "S1",
                "S2",
                "S3",
                "P1",
                "P2",
                "P3",
                "P4"
            ],
            "metadata": {
                "description": "Describes plan's pricing tier and instance size. Check details at https://azure.microsoft.com/en-us/pricing/details/app-service/"
            }
        },
        "skuCapacity": {
            "type": "int",
            "defaultValue": 1,
            "minValue": 1,
            "metadata": {
                "description": "Describes plan's instance count"
            }
        },
        "hostingPlanName": {
            "type": "string",
            "defaultValue": "AppServPlan",
            "metadata": {
                "description": "Describes Hosting plan's name"
            }
        },
        "apiServerName": {
            "type": "string",
            "defaultValue": "apiserver",
            "metadata": {
                "description": "Describes API Server name which should be unique"
            }
        },
        "emailHost": {
            "type": "string",
            "defaultValue": "ermhost",
            "metadata": {
                "description": "Describes the host name for sending email notifications"
            }
        },
        "emailHostPort": {
            "type": "string",
            "defaultValue": "25",
            "metadata": {
                "description": "Describes the port number for email host"
            }
        },
        "senderEmail": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Describes the email ID of the sender for email notifications"
            }
        },
        "senderEmailPassword": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "descrition": "Describes the password for sender email ID for email notifications"
            }
        },
        "b2cTenant": {
            "type": "string",
            "defaultValue": "testiot22.onmicrosoft.com",
            "metadata": {
                "description": "Describes B2C Tenant Name Directory"
            }
        },
        "b2cClientId": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "Describes the client Id of the application registered in B2C Directory"
            }
        },
        "b2cClientSecret": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "Describes the Client secret of the application registered in B2C Directory"
            }
        },
        "b2cSignUpPolicyId": {
            "type": "string",
            "defaultValue": "B2C_1_suppolicy2",
            "metadata": {
                "description": "Describes the B2C Sign Up policy"
            }
        },
        "b2cSignInPolicyId": {
            "type": "string",
            "defaultValue": "B2C_1_sinpolicy2",
            "metadata": {
                "description": "Describes the B2C Sign in policy"
            }
        },
        "b2cEditProfilePolicyId": {
            "type": "string",
            "defaultValue": "B2C_1_peditpolicy2",
            "metadata": {
                "description": "Describes the B2C Profile Editing policy"
            }
        },
        "b2cChangePasswordPolicy": {
            "type": "string",
            "defaultValue": "B2C_1_cpasspolicy",
            "metadata": {
                "description": "Describes the B2C Change Password policy"
            }
        },
        "MLskuName": {
            "type": "string",
            "defaultValue": "S1",
            "allowedValues": [
                "S1",
                "S2",
                "S3"
            ],
            "metadata": {
                "description": "Pricing tier for Workspace"
            }
        },
        "chefUserFirstName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Chef user first name"
            }
        },
        "chefUserLastName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Chef user last name"
            }
        },
        "chefUserEmail": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Chef user email"
            }
        },
        "chefOrgShortName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Chef org short name"
            }
        },
        "subscriptionId": {
            "type": "string",
            "defaultValue": "2927c217-b119-4d3b-8a13-82a1c3a16c8f",
            "minLength": 1,
            "metadata": {
                "description": "Azure Subscription ID"
            }
        },
        "keyVaultResourceGroup": {
            "type": "string",
            "defaultValue": "iot-keyvault",
            "minLength": 1,
            "metadata": {
                "description": "Resource Group that contains the Key Vault"
            }
        },
        "keyVaultName": {
            "type": "string",
            "defaultValue": "iotkeyvault1",
            "minLength": 1,
            "metadata": {
                "description": "Name of the Key Vault"
            }
        },
        "keyVaultSecret": {
            "type": "securestring",
            "defaultValue": "sshprivatekey",
            "minLength": 1,
            "metadata": {
                "description": "Key Vault Secret Name that contains the Private Key"
            }
        },
        "vaultName": {
            "type": "string",
            "defaultValue": "iotvault",
            "metadata": {
                "description": "Name of the Recovery Services Vault"
            }
        },
        "policyName": {
            "type": "string",
            "defaultValue": "iotpolicy",
            "metadata": {
                "description": "Name of the Backup Policy"
            }
        },
        "scheduleRunTimes": {
            "type": "array",
            "defaultValue": [
                "00:30"
            ],
            "metadata": {
                "description": "Times in day when backup should be triggered. e.g. 01:00, 13:00. This will be used in LTR too for daily, weekly, monthly and yearly backup."
            }
        },
        "dailyRetentionDurationCount": {
            "type": "int",
            "defaultValue": 30,
            "metadata": {
                "description": "Number of days you want to retain the backup"
            }
        },
        "existingVirtualMachinesResourceGroup": {
            "type": "string",
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
                "description": "Resource group where the virtual machines are located. This can be different than resource group of the vault. "
            }
        },
        "existingVirtualMachines": {
            "type": "array",
            "defaultValue": [
                "bastionServer",
                "adServer",
                "fortigate",
                "PIAFSQLServer",
                "PIBAVMServer",
                "trendServer",
                "chefworkstation",
                "chefautomate"
            ],
            "metadata": {
                "description": "Array of Azure virtual machines. e.g. [\"vm1\",\"vm2\",\"vm3\"]"
            }
        }
    },
    "variables": {
        "apiVersions": {
            "deploymentApiVersion": "2016-02-01",
            "computeApiVersion": "2016-04-30-preview",
            "networkApiVersion": "2016-09-01",
            "storageApiVersion": "2016-01-01",
            "sqlServerApiVersion": "2015-05-01-preview",
            "sqlDBApiVersion": "2014-04-01-preview",
            "workspaceApiVersion": "2016-04-01",
            "planApiVersion": "2016-05-01-preview",
            "webApiVersion": "2016-03-01",
            "webApiVersion1": "2015-08-01",
            "webApiVersion2": "2014-08-01-preview",
            "routtableApiVersion": "2015-06-15",
            "vaultApiVersion": "2016-06-01"
        },
        "networkSettings": {
            "location": "[variables('location')]",
            "networkApiVersion": "2016-03-30",
            "virtualNetworkName": "MyVNET",
            "addressPrefix": "10.0.0.0/16",
            "subnet1Name": "subnet1",
            "subnet1Prefix": "10.0.0.0/24",
            "subnet2Name": "subnet2",
            "subnet2Prefix": "10.0.1.0/24",
            "subnet3Name": "subnet3",
            "subnet3Prefix": "10.0.2.0/24",
            "subnet4Name": "subnet4",
            "subnet4Prefix": "10.0.3.0/24",
            "subnet5Name": "subnet5",
            "subnet5Prefix": "10.0.4.0/24"
        },
        "bastionServerSettings": {
            "location": "[variables('location')]",
            "bastionVMName": "bastionServer",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]",
            "bastionNic": "bastion-nic",
            "bastionDiagStgAcnt": "[concat('bastionstrg',variables('suffix'))]",
            "bastionVMSize": "Standard_DS1_v2",
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2012-R2-Datacenter",
            "version": "latest",
            "storageAccountType": "[variables('storageAccountType')]",
            "diagStorageAccountType": "Standard_LRS",
            "wsDiagStgAcnt": "[concat('wsstrg',variables('suffix'))]",
            "publicIpAddressName": "bastion-pip",
            "networkSecurityGroupName": "bastion-nsg",
            "publicIpAddressType": "Dynamic",
            "bastionDnsLabelPrefix": "[concat('bastionserver',variables('suffix'))]",
            "fileUris": "[concat(variables('baseUrl'),'scripts/psscript.ps1')]",
            "scriptFileName": "psscript.ps1",
            "domainName": "[parameters('domainName')]",
            "Username": "[parameters('adminUsername')]",
            "Password": "[parameters('adminPassword')]",
            "wsVmName": "chefworkstation",
            "wsNsg": "ws-client-nsg",
            "wsNic": "ws-client-nic",
            "wsPublicIpName": "ws-publicip",
            "vmSize": "Standard_DS2_v2",
            "appCreationURL": "[concat(variables('baseUrl'),'nested/appCreation.json')]",
            "orguser": "[parameters('chefOrgShortName')]",
            "appScriptUrl": "[concat(variables('baseUrl'),'scripts/powerBIApp.ps1')]",
            "wsClientDns": "[concat('wsclient',variables('suffix'))]",
            "powerBIUrl": "[concat(variables('baseUrl'),'nested/powerbiinstall.json')]",
            "powerBIScriptUrl": "[concat(variables('baseUrl'),'scripts/powerbidesktop.ps1')]",
            "powerBITemplatesUrl": "https://github.com/sysgain/iot-automation/raw/iotnew/powerBItemplates/PowerBI_Templates.zip",
            "powerBIDesktopUrl": "https://projectiot.blob.core.windows.net/iotp2/PBIDesktop_x64.msi",
            "workstationSetup": "[concat(variables('baseUrl'),'scripts/workstationsetup1.ps1')]",
            "workstationextensionurl": "[concat(variables('baseUrl'),'nested/workstation-extension.json')]",
            "workstationSetupUrl2": "[concat(variables('baseUrl'),'scripts/workstationsetup2.ps1')]",
            "domainJoinUrl": "[concat(variables('baseUrl'),'nested/domainjoin.json')]",
            "ManagerAddress": "[variables('ManagerAddress')]",
            "ActivationPort": "[variables('ActivationPort')]",
            "TenantIdentifier": "[variables('TenantIdentifier')]",
            "TenantActivationPassword": "[variables('TenantActivationPassword')]"
        },
        "fortigateFirewallSettings": {
            "authenticationType": "[parameters('authTypeForLinuxServers')]",
            "sshKey": "[parameters('adminSSHKey')]",
            "location": "[variables('location')]",
            "fortiAvailName": "forti-avset",
            "FGPubFacingAddress": "10.0.0.4",
            "FGDMZAddress": "10.0.1.7",
            "fortiPublicIPAddressName": "forti-pip",
            "publicIPAddressType": "Dynamic",
            "FortiGateName": "[parameters('FortiGateName')]",
            "fortiNicName1": "forti-nic1",
            "fortiNicName2": "forti-nic2",
            "name": "fortinet_fg-vm",
            "product": "fortinet_fortigate-vm_v5",
            "publisher": "fortinet",
            "vmSize": "Standard_D1_v2",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]",
            "routeTable1Name": "[concat(parameters('FortiGateName'), '-', variables('networkSettings').subnet2Name,'-routes')]",
            "routeTable2Name": "[concat(parameters('FortiGateName'), '-', variables('networkSettings').subnet1Name,'-routes')]"
        },
        "mcsModules": {
            "authenticationType": "[parameters('authTypeForLinuxServers')]",
            "sshKey": "[parameters('adminSSHKey')]",
            "location": "[variables('location')]",
            "adNicName": "adNic",
            "adNicIPAddress": "10.0.1.4",
            "chefAutomateIPAddress": "10.0.1.6",
            "adVMName": "adServer",
            "Username": "[parameters('adminUsername')]",
            "Password": "[parameters('adminPassword')]",
            "domainName": "[parameters('domainName')]",
            "adExtensionName": "CreateADForest",
            "chefAutoNsg": "chefauto-nsg",
            "chefAutoNic": "chefauto-nic",
            "chefAutoDns": "[concat('chefauto',variables('suffix'))]",
            "scriptFileName": "psscript.ps1",
            "dnsPrefix": "[concat('adserver',variables('suffix'))]",
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2016-Datacenter",
            "version": "latest",
            "chefImagePublisher": "chef-software",
            "chefImageOffer": "chef-automate",
            "chefImageSKU": "byol",
            "chefImageVersion": "latest",
            "chefAutoVmName": "chefautomate",
            "firstname": "[parameters('chefUserFirstName')]",
            "lastname": "[parameters('chefUserLastName')]",
            "orguser": "[parameters('chefOrgShortName')]",
            "mailid": "[parameters('chefUserEmail')]",
            "rubyPath": "/opt/chef-marketplace/embedded/bin/ruby",
            "vmSize": "Standard_DS2_v2",
            "automateLicenseUri": "",
            "storageAccountType": "Premium_LRS",
            "adNetworkSecurityGroupName": "adnsg",
            "adstorageAccountName": "[concat('adstrg',variables('suffix'))]",
            "diskCreateOption": "empty",
            "diskSizeGB": "1023",
            "trendNSG": "trend-nsg",
            "trendNic": "trend-nic",
            "trendVMName": "trendServer",
            "trendPublisher": "trendmicro",
            "trendVMSku": "dxxnbyol",
            "trendProduct": "deep-security-vm-byol",
            "trendsqlServerName": "[concat('trendsql',variables('suffix'))]",
            "sqlDBName": "dsm",
            "dbAdminName": "[parameters('adminUsername')]",
            "dbAdminPassword": "[parameters('adminPassword')]",
            "dsmAdminName": "[parameters('adminUsername')]",
            "dsmAdminPassword": "[parameters('adminPassword')]",
            "trendNicIPAddress": "[variables('trendNicIPAddress')]",
            "databaseOption": "new",
            "licenseMode": "20",
            "managerPort": "443",
            "heartbeatPort": "[variables('heartbeatPort')]",
            "ManagerAddress": "[variables('ManagerAddress')]",
            "ActivationPort": "[variables('ActivationPort')]",
            "TenantIdentifier": "[variables('TenantIdentifier')]",
            "TenantActivationPassword": "[variables('TenantActivationPassword')]",
            "azureSQLUrl": "[concat(variables('baseUrl'),'/nested/database-new.json')]",
            "fileUris": "[concat(variables('baseUrl'),'scripts/psscript.ps1')]",
            "dscScriptUrl": "[variables('dscScriptUrl')]",
            "updateVnetDnsUrl": "[concat(variables('baseUrl'), 'nested/vnetdns.json')]",
            "chefAutoScriptUrl1": "[concat(variables('baseUrl'),'scripts/automate_setup.rb')]"
        },
        "piafsqlSettings": {
            "location": "[variables('location')]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]",
            "networkInterfaceName": "sqlNic",
            "networkSecurityGroupName": "sqlNsg",
            "publicIpAddressName": "sqlpip",
            "sqlAuthenticationLogin": "[parameters('sqlAdministratorLogin')]",
            "sqlAuthenticationPassword": "[parameters('sqlAdministratorLoginPassword')]",
            "sqlStorageAccountName": "[concat('sqlserver',variables('suffix'))]",
            "sqlservername": "PIAFSQLServer",
            "storageAccountType": "Premium_LRS",
            "publisher": "MicrosoftSQLServer",
            "offer": "SQL2016SP1-WS2016",
            "sku": "Express",
            "version": "latest",
            "vmSize": "Standard_DS2_v2",
            "sqlConnectivityType": "Private",
            "sqlPrivateIPAddress": "10.0.2.4",
            "sqlStorageDisksCount": "1",
            "sqlStorageWorkloadType": "GENERAL",
            "sqlAutopatchingDayOfWeek": "Sunday",
            "sqlAutopatchingStartHour": "2",
            "sqlAutopatchingWindowDuration": "60",
            "sqlStorageDeploymentToken": "456",
            "scriptFileName": "psscript.ps1",
            "scriptFileName3": "simulatorsetup.ps1",
            "domainName": "[parameters('domainName')]",
            "Username": "[parameters('adminUsername')]",
            "Password": "[parameters('adminPassword')]",
            "baseUrl": "[variables('baseUrl')]",
            "fileUris": "[concat(variables('baseUrl'),'scripts/psscript.ps1')]",
            "fileUris3": "[concat(variables('baseUrl'),'scripts/simulatorsetup.ps1')]",
            "databaseName": "iottestdb",
            "ManagerAddress": "[variables('ManagerAddress')]",
            "ActivationPort": "[variables('ActivationPort')]",
            "TenantIdentifier": "[variables('TenantIdentifier')]",
            "TenantActivationPassword": "[variables('TenantActivationPassword')]",
            "simulatorUrl": "https://projectiot.blob.core.windows.net/iotp2/SimulatorSetup.msi",
            "dataserviceUrl": "https://projectiot.blob.core.windows.net/iotp2/DataServiceSetup.msi",
            "piWebApiSimulatorUrl": "https://projectiot.blob.core.windows.net/iotp2/PiWebAPISimulatorSetup.msi"
        },
        "pibaServersettings": {
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]",
            "location": "[variables('location')]",
            "pibaVMName": "PIBAVMServer",
            "pibaNic": "PIBAVMNic",
            "pibaNetworkSecurityGroupName": "PIBANsg",
            "pibaDiagStgAcnt": "[concat('pibavm',variables('suffix'))]",
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2012-R2-Datacenter",
            "version": "latest",
            "pibaVMSize": "Standard_DS4_v2",
            "storageAccountType": "[variables('storageAccountType')]",
            "diagStorageAccountType": "Standard_LRS",
            "pibaPrivateIPAddress": "10.0.3.4",
            "scriptFileName": "psscript.ps1",
            "domainName": "[parameters('domainName')]",
            "fileUris": "[concat(variables('baseUrl'),'scripts/psscript.ps1')]",
            "Username": "[parameters('adminUsername')]",
            "Password": "[parameters('adminPassword')]",
            "domainJoinUrl": "[concat(variables('baseUrl'),'nested/domainjoin.json')]",
            "ManagerAddress": "[variables('ManagerAddress')]",
            "ActivationPort": "[variables('ActivationPort')]",
            "TenantIdentifier": "[variables('TenantIdentifier')]",
            "TenantActivationPassword": "[variables('TenantActivationPassword')]"
        },
        "azureSQL": {
            "location": "[variables('location')]",
            "sqlAuthenticationLogin": "[parameters('sqlAdministratorLogin')]",
            "sqlAuthenticationPassword": "[parameters('sqlAdministratorLoginPassword')]",
            "collation": "SQL_Latin1_General_CP1_CI_AS",
            "databaseName": "azuredb",
            "edition": "Standard",
            "requestedServiceObjectiveName": "S2",
            "maxSizeBytes": "268435456000",
            "serverName": "[concat('sqlserver',variables('suffix'))]",
            "storageKeyType": "SharedAccessKey",
            "storageKey": "?",
            "storageUri": "https://projectiot.blob.core.windows.net/iotp2/EnergyManagement.bacpac"
        },
        "mlSettings": {
            "location": "South Central US",
            "workspaceName": "workspace",
            "mlSkuName": "[parameters('MLskuName')]",
            "mlStorageName": "[concat('mlstr', variables('suffix'))]"
        },
        "webSiteSettings": {
            "location": "[variables('location')]",
            "jobCollectionName": "[concat('myjob', variables('suffix'))]",
            "webjobStorageName": "[concat('webjobstr',variables('suffix'))]",
            "webjobStorageType": "Standard_LRS",
            "hostingPlanName": "[parameters('hostingPlanName')]",
            "skuName": "[parameters('skuName')]",
            "skuCapacity": "[parameters('skuCapacity')]",
            "webSiteName": "[parameters('websiteName')]",
            "WebAppPackageURI": "[concat(variables('webAppDeployPackageURI'), variables('sasToken'))]",
            "restServerDeployPackageURI": "[concat(variables('restServerDeployPackageURI'), variables('sasToken'))]",
            "blobconnectionString": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('deployStorageAccountName'),';AccountKey=',variables('deployStorageAccountKey'))]",
            "apiServerName": "[concat(parameters('apiServerName'),variables('suffix'))]",
            "b2cClientId": "[parameters('b2cClientId')]",
            "b2cSignInPolicyId": "[parameters('b2cSignInPolicyId')]",
            "b2cSignUpPolicyId": "[parameters('b2cSignUpPolicyId')]",
            "b2cEditProfilePolicyId": "[parameters('b2cEditProfilePolicyId')]",
            "b2cTenant": "[parameters('b2cTenant')]",
            "b2cClientSecret": "[parameters('b2cClientSecret')]",
            "b2cChangePasswordPolicy": "[parameters('b2cChangePasswordPolicy')]",
            "emailHost": "[parameters('emailHost')]",
            "emailHostPort": "[parameters('emailHostPort')]",
            "senderEmail": "[parameters('senderEmail')]",
            "senderEmailPassword": "[parameters('senderEmailPassword')]",
            "websiteFullAddress": "[variables('websiteFullAddress')]",
            "b2cAadInstance": "https://login.microsoftonline.com/{0}/v2.0/.well-known/openid-configuration?p={1}",
            "notificationIcon": "./csu/Assets/logo.png",
            "anomalyThreshold": "0.6",
            "meterKWHCost": "0.04",
            "databaseConnString": "[concat('data source=',variables('azureSQL').serverName,'.database.windows.net;initial catalog=',variables('azureSQL').databaseName,';persist security info=True;user id=',parameters('sqlAdministratorLogin'),';password=',parameters('sqlAdministratorLoginPassword'))]",
            "notificationClickAction": "[variables('websiteFullAddress')]",
            "restServerPackageURI": "[concat(variables('restServerDeployPackageURI'), variables('sasToken'))]",
            "powerGridEntities": "[concat('metadata=res://*/Entities.PowergridModel.csdl|res://*/Entities.PowergridModel.ssdl|res://*/Entities.PowergridModel.msl;provider=System.Data.SqlClient;provider connection string=\"data source=',variables('azureSQL').serverName,'.database.windows.net;initial catalog=',variables('azureSQL').databaseName,';persist security info=True;user id=',parameters('sqlAdministratorLogin'),';password=',parameters('sqlAdministratorLoginPassword'),';multipleactiveresultsets=True;application name=EntityFramework\"')]"
        },
        "backupSettings": {
            "backupFabric": "Azure",
            "v2VmType": "Microsoft.Compute/virtualMachines",
            "v2VmContainer": "iaasvmcontainer;iaasvmcontainerv2;",
            "v2Vm": "vm;iaasvmcontainerv2;",
            "existingRecoveryServicesVault": "[concat(parameters('vaultName'),variables('suffix'))]",
            "existingBackupPolicy": "[parameters('policyName')]",
            "scheduleRunTimes": "[parameters('scheduleRunTimes')]",
            "dailyRetentionDurationCount": "[parameters('dailyRetentionDurationCount')]",
            "existingVirtualMachinesResourceGroup": "[parameters('existingVirtualMachinesResourceGroup')]",
            "existingVirtualMachines": "[parameters('existingVirtualMachines')]"
        },
        "trendNicIPAddress": "10.0.1.5",
        "heartbeatPort": "4120",
        "ManagerAddress": "[variables('trendNicIPAddress')]",
        "ActivationPort": "[variables('heartbeatPort')]",
        "TenantIdentifier": "NA",
        "TenantActivationPassword": "NA",
        "location": "[resourceGroup().location]",
        "websiteFullAddress": "[concat('https://',parameters('websiteName'),'.azurewebsites.net/')]",
        "deployStorageAccountName": "releasemtr",
        "deployStorageAccountKey": "",
        "webAppDeployPackageURI": "https://projectiot.blob.core.windows.net/iotp2/CSUWebApp.zip",
        "restServerDeployPackageURI": "https://projectiot.blob.core.windows.net/iotp2/RestService.zip",
        "sasToken": "?",
        "dnsServerAddress": "10.0.1.4",
        "storageAccountType": "Premium_LRS",
        "baseUrl": "https://raw.githubusercontent.com/sysgain/iot-automation/main/",
        "dscScriptUrl": "https://github.com/sysgain/iot-automation/raw/main",
        "deploymentApiVersion": "2016-02-01",
        "suffix": "[substring(uniqueString(resourceGroup().id), 0, 5)]"
    },
    "resources": [
        {
            "type": "Microsoft.Network/routeTables",
            "name": "[variables('fortigateFirewallSettings').routeTable1Name]",
            "apiVersion": "[variables('apiVersions').routtableApiVersion]",
            "location": "[variables('fortigateFirewallSettings').location]",
            "properties": {
                "routes": [
                    {
                        "name": "[concat('to', '-', variables('networkSettings').subnet2Name)]",
                        "properties": {
                            "addressPrefix": "[variables('networkSettings').subnet2Prefix]",
                            "nextHopType": "VirtualAppliance",
                            "nextHopIpAddress": "[variables('fortigateFirewallSettings').FGPubFacingAddress]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/routeTables",
            "name": "[variables('fortigateFirewallSettings').routeTable2Name]",
            "apiVersion": "[variables('apiVersions').routtableApiVersion]",
            "location": "[variables('fortigateFirewallSettings').location]",
            "properties": {
                "routes": [
                    {
                        "name": "[concat('to', '-', variables('networkSettings').subnet1Name)]",
                        "properties": {
                            "addressPrefix": "[variables('networkSettings').subnet1Prefix]",
                            "nextHopType": "VirtualAppliance",
                            "nextHopIpAddress": "[variables('fortigateFirewallSettings').FGDMZAddress]"
                        }
                    },
                    {
                        "name": "to-Internet",
                        "properties": {
                            "AddressPrefix": "0.0.0.0/0",
                            "nextHopType": "VirtualAppliance",
                            "nextHopIPAddress": "[variables('fortigateFirewallSettings').FGDMZAddress]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('networkSettings').virtualNetworkName]",
            "apiVersion": "[variables('apiVersions').networkApiVersion]",
            "location": "[variables('networkSettings').location]",
            "dependsOn": [
                "[concat('Microsoft.Network/routeTables/', variables('fortigateFirewallSettings').routeTable1Name)]",
                "[concat('Microsoft.Network/routeTables/', variables('fortigateFirewallSettings').routeTable2Name)]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('networkSettings').addressPrefix]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('networkSettings').subnet1Name]",
                        "properties": {
                            "addressPrefix": "[variables('networkSettings').subnet1Prefix]"
                        }
                    },
                    {
                        "name": "[variables('networkSettings').subnet2Name]",
                        "properties": {
                            "addressPrefix": "[variables('networkSettings').subnet2Prefix]"
                        }
                    },
                    {
                        "name": "[variables('networkSettings').subnet3Name]",
                        "properties": {
                            "addressPrefix": "[variables('networkSettings').subnet3Prefix]"
                        }
                    },
                    {
                        "name": "[variables('networkSettings').subnet4Name]",
                        "properties": {
                            "addressPrefix": "[variables('networkSettings').subnet4Prefix]"
                        }
                    },
                    {
                        "name": "[variables('networkSettings').subnet5Name]",
                        "properties": {
                            "addressPrefix": "[variables('networkSettings').subnet5Prefix]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "AppComponents",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/',variables('networkSettings').virtualNetworkName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('baseUrl'), 'nested/appComponents.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "azureSQL": {
                        "value": "[variables('azureSQL')]"
                    },
                    "mlSettings": {
                        "value": "[variables('mlSettings')]"
                    },
                    "webSiteSettings": {
                        "value": "[variables('webSiteSettings')]"
                    },
                    "apiVersions": {
                        "value": "[variables('apiVersions')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "mcsModules",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/',variables('networkSettings').virtualNetworkName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('baseUrl'), 'nested/mcs.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "mcsModules": {
                        "value": "[variables('mcsModules')]"
                    },
                    "networkSettings": {
                        "value": "[variables('networkSettings')]"
                    },
                    "apiVersions": {
                        "value": "[variables('apiVersions')]"
                    },
                    "dnsServerAddress": {
                        "value": [
                            "[variables('dnsServerAddress')]"
                        ]
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "BastionHost",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "dependsOn": [
                "mcsModules"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('baseUrl'), 'nested/bastionServer.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "bastionServerSettings": {
                        "value": "[variables('bastionServerSettings')]"
                    },
                    "networkSettings": {
                        "value": "[variables('networkSettings')]"
                    },
                    "apiVersions": {
                        "value": "[variables('apiVersions')]"
                    },
                    "fortigateFirewallSettings": {
                        "value": "[variables('fortigateFirewallSettings')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "PIComponents",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "dependsOn": [
                "mcsModules"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('baseUrl'), 'nested/piComponents.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "piafsqlSettings": {
                        "value": "[variables('piafsqlSettings')]"
                    },
                    "pibaServersettings": {
                        "value": "[variables('pibaServersettings')]"
                    },
                    "networkSettings": {
                        "value": "[variables('networkSettings')]"
                    },
                    "apiVersions": {
                        "value": "[variables('apiVersions')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "WorkStation",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "dependsOn": [
                "BastionHost",
                "PIComponents",
                "mcsModules"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('baseUrl'), 'nested/workStationServer.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "bastionServerSettings": {
                        "value": "[variables('bastionServerSettings')]"
                    },
                    "networkSettings": {
                        "value": "[variables('networkSettings')]"
                    },
                    "apiVersions": {
                        "value": "[variables('apiVersions')]"
                    },
                    "mcsModules": {
                        "value": "[variables('mcsModules')]"
                    },
                    "piafsqlSettings": {
                        "value": "[variables('piafsqlSettings')]"
                    },
                    "pibaServersettings": {
                        "value": "[variables('pibaServersettings')]"
                    },
                    "sshPrivateKey": {
                        "reference": {
                            "keyVault": {
                                "id": "[concat('/subscriptions/', parameters('subscriptionId'), '/resourceGroups/', parameters('keyVaultResourceGroup'), '/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
                            },
                            "secretName": "[parameters('keyVaultSecret')]"
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "Backup",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "dependsOn": [
                "WorkStation"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('baseUrl'), 'nested/backup.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "backupSettings": {
                        "value": "[variables('backupSettings')]"
                    },
                    "apiVersions": {
                        "value": "[variables('apiVersions')]"
                    }
                }
            }
        }
    ],
    "outputs": {
        "adminUsername": {
            "type": "string",
            "value": "[parameters('adminUserName')]"
        },
        "bastionFQDN": {
            "type": "string",
            "value": "[reference('BastionHost').outputs.bastionFQDN.value]"
        },
        "adServerIPAddress": {
            "type": "string",
            "value": "[variables('mcsModules').adNicIPAddress]"
        },
        "piafSQLServerIPAddress": {
            "type": "string",
            "value": "[variables('piafsqlSettings').sqlPrivateIPAddress]"
        },
        "workstationFQDN": {
            "type": "string",
            "value": "[reference('WorkStation').outputs.workstationFQDN.value]"
        },
        "chefAutomateIPAddress": {
            "type": "string",
            "value": "[variables('mcsModules').chefAutomateIPAddress]"
        },
        "chefAutomateLoginUsername": {
            "type": "string",
            "value": "[parameters('adminUserName')]"
        },
        "trendIPAddress": {
            "type": "string",
            "value": "[variables('trendNicIPAddress')]"
        },
        "pibaServerIPAddress": {
            "type": "string",
            "value": "[variables('pibaServersettings').pibaPrivateIPAddress]"
        },
        "azureSQLEndpoint": {
            "type": "string",
            "value": "[reference('AppComponents').outputs.azureSQLServerName.value]"
        },
        "azureSQLDBName": {
            "type": "string",
            "value": "[reference('AppComponents').outputs.azureDBName.value]"
        },
        "azureSQLUsername": {
            "type": "string",
            "value": "[parameters('sqlAdministratorLogin')]"
        },
        "windowsSQLUsername": {
            "type": "string",
            "value": "[parameters('sqlAdministratorLogin')]"
        },
        "webSiteUrl": {
            "type": "string",
            "value": "[variables('websiteFullAddress')]"
        }
    }
}