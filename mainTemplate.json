{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "defaultValue": "adminuser",
      "metadata": {
        "description": "Username for all the Virtual Machines(for linux and Windows), make a note of the Username this will be used further"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Password for Windows Virtual Machines,make a note of the Password this will be used further."
      }
    },
    "domainName": {
      "type": "string",
      "defaultValue": "sysgainiot.com",
      "metadata": {
        "description": "The FQDN of the Active Directory Domain to be created on VM (E.g:msfiot.com "
      }
    },
    "bastionVMSize":{
      "type": "string",
      "defaultValue": "Standard_DS2_v2",
      "allowedValues": [
        "Standard_DS1",
        "Standard_DS2",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS11",
        "Standard_DS12",
        "Standard_DS13",
        "Standard_DS14",
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_DS11_v2",
        "Standard_DS12_v2",
        "Standard_DS13_v2",
        "Standard_DS14_v2"
      ],
      "metadata": {
        "description": "Bastion Virtual Machine size"
      }
    },
    "chefWorkstationVMSize":{
      "type": "string",
      "defaultValue": "Standard_DS2_v2",
      "allowedValues": [
        "Standard_DS1",
        "Standard_DS2",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS11",
        "Standard_DS12",
        "Standard_DS13",
        "Standard_DS14",
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_DS11_v2",
        "Standard_DS12_v2",
        "Standard_DS13_v2",
        "Standard_DS14_v2"
      ],
      "metadata": {
        "description": "chef workstation Virtual Machine size"
      }
    },
    "fortigateVMSize":{
      "type": "string",
      "defaultValue": "Standard_D1_v2",
      "allowedValues": [
        "Standard_D1_v2",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D2",
        "Standard_D3",
        "Standard_D4"
      ],
      "metadata": {
        "description": "fortigate Virtual Machine size"
      }
    },
    "adServerVMSize":{
      "type": "string",
      "defaultValue": "Standard_DS2_v2",
      "allowedValues": [
        "Standard_DS1",
        "Standard_DS2",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS11",
        "Standard_DS12",
        "Standard_DS13",
        "Standard_DS14",
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_DS11_v2",
        "Standard_DS12_v2",
        "Standard_DS13_v2",
        "Standard_DS14_v2"
      ],
      "metadata": {
        "description": "Active directory Virtual Machine size"
      }
    },
    "trendVMSize":{
      "type": "string",
      "defaultValue": "Standard_DS2_v2",
      "allowedValues": [
        "Standard_DS2",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS11",
        "Standard_DS12",
        "Standard_DS13",
        "Standard_DS14",
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_DS11_v2",
        "Standard_DS12_v2",
        "Standard_DS13_v2",
        "Standard_DS14_v2"
      ],
      "metadata": {
        "description": "trend Virtual Machine size"
      }
    },
    "splunkVMSize":{
      "type": "string",
      "defaultValue": "Standard_DS2_v2",
      "allowedValues": [
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS12",
        "Standard_DS13",
        "Standard_DS14",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_DS12_v2",
        "Standard_DS13_v2",
        "Standard_DS14_v2",
        "Standard_DS15_v2"
      ],
      "metadata": {
        "description": "splunk Virtual Machine size"
      }
    },
    "chefAutomateVMSize":{
      "type": "string",
      "defaultValue": "Standard_DS2_v2",
      "allowedValues": [
        "Standard_DS1",
        "Standard_DS2",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS11",
        "Standard_DS12",
        "Standard_DS13",
        "Standard_DS14",
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_DS11_v2",
        "Standard_DS12_v2",
        "Standard_DS13_v2",
        "Standard_DS14_v2"
      ],
      "metadata": {
        "description": "chef Automate Virtual Machine size"
      }
    },
    "PIAFDASQLServerVMSize":{
      "type": "string",
      "defaultValue": "Standard_DS2_v2",
      "allowedValues": [
        "Standard_DS1",
        "Standard_DS2",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS11",
        "Standard_DS12",
        "Standard_DS13",
        "Standard_DS14",
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_DS11_v2",
        "Standard_DS12_v2",
        "Standard_DS13_v2",
        "Standard_DS14_v2"
      ],
      "metadata": {
        "description": "PIAFDASQL Virtual Machine size"
      }
    },
    "PIBAServerVMSize":{
      "type": "string",
      "defaultValue": "Standard_DS4_v2",
      "allowedValues": [
        "Standard_DS4",
        "Standard_DS11",
        "Standard_DS12",
        "Standard_DS13",
        "Standard_DS14",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_DS11_v2",
        "Standard_DS12_v2",
        "Standard_DS13_v2",
        "Standard_DS14_v2"
      ],
      "metadata": {
        "description": "PIBA Virtual Machine size"
      }
    },
    "websiteName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Describes webSite name which should be unique"
      }
    },
    "sqlAdministratorLogin": {
      "type": "string",
      "defaultValue": "sqluser",
      "metadata": {
        "description": "The SQL authentication admin user of the SQL Server, make a note of Username this will be used further"
      }
    },
    "sqlAdministratorLoginPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "The SQL authentication password of the admin user of the SQL Server, make a note of the Password this will be used further"
      }
    },
    "skuName": {
      "type": "string",
      "defaultValue": "S1",
      "allowedValues": [
        "D1",
        "B1",
        "B2",
        "B3",
        "S1",
        "S2",
        "S3",
        "P1",
        "P2",
        "P3",
        "P4"
      ],
      "metadata": {
        "description": "Describes plan's pricing tier and instance size. Check details at https://azure.microsoft.com/en-us/pricing/details/app-service/"
      }
    },
    "skuCapacity": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "metadata": {
        "description": "Describes plan's instance count"
      }
    },
    "emailHost": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Describes the host name for sending email notifications"
      }
    },
    "emailHostPort": {
      "type": "string",
      "defaultValue": "25",
      "metadata": {
        "description": "Describes the port number for email host"
      }
    },
    "senderEmail": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Describes the email ID of the sender for email notifications (e.g.: iot@onmicrosoft.com)"
      }
    },
    "senderEmailPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "descrition": "Describes the password for sender email ID for email notifications"
      }
    },
    "b2cTenant": {
      "type": "string",
      "defaultValue": "testiot22.onmicrosoft.com",
      "metadata": {
        "description": "Describes B2C Tenant Name Directory"
      }
    },
    "b2cClientId": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Describes the client Id of the application registered in B2C Directory"
      }
    },
    "b2cClientSecret": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Describes the Client secret of the application registered in B2C Directory"
      }
    },
    "b2cSignUpPolicyId": {
      "type": "string",
      "defaultValue": "B2C_1_suppolicy2",
      "metadata": {
        "description": "Describes the B2C Sign Up policy"
      }
    },
    "b2cSignInPolicyId": {
      "type": "string",
      "defaultValue": "B2C_1_sinpolicy2",
      "metadata": {
        "description": "Describes the B2C Sign in policy"
      }
    },
    "b2cEditProfilePolicyId": {
      "type": "string",
      "defaultValue": "B2C_1_peditpolicy2",
      "metadata": {
        "description": "Describes the B2C Profile Editing policy"
      }
    },
    "b2cChangePasswordPolicy": {
      "type": "string",
      "defaultValue": "B2C_1_cpasspolicy",
      "metadata": {
        "description": "Describes the B2C Change Password policy"
      }
    },
    "MLskuName": {
      "type": "string",
      "defaultValue": "S1",
      "allowedValues": [
        "S1",
        "S2",
        "S3"
      ],
      "metadata": {
        "description": "Pricing tier for Workspace"
      }
    },
    "chefUserFirstName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Chef user first name"
      }
    },
    "chefUserLastName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Chef user last name"
      }
    },
    "chefUserEmail": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Chef user email"
      }
    },
    "chefOrgShortName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Chef org short name"
      }
    }
  },
  "variables": {
    "apiVersions": {
      "deploymentApiVersion": "2016-02-01",
      "computeApiVersion": "2016-04-30-preview",
      "networkApiVersion": "2016-09-01",
      "storageApiVersion": "2016-01-01",
      "sqlServerApiVersion": "2015-05-01-preview",
      "sqlDBApiVersion": "2014-04-01-preview",
      "workspaceApiVersion": "2016-04-01",
      "planApiVersion": "2016-05-01-preview",
      "webApiVersion": "2016-03-01",
      "webApiVersion1": "2015-08-01",
      "webApiVersion2": "2014-08-01-preview",
      "routtableApiVersion": "2015-06-15",
      "vaultApiVersion": "2016-06-01"
    },
    "networkSettings": {
      "location": "[variables('location')]",
      "networkApiVersion": "2016-03-30",
      "virtualNetworkName": "MyVNET",
      "addressPrefix": "10.0.0.0/16",
      "subnet1Name": "subnet1",
      "subnet1Prefix": "10.0.0.0/24",
      "subnet2Name": "subnet2",
      "subnet2Prefix": "10.0.1.0/24"
    },
    "bastionServerSettings": {
      "location": "[variables('location')]",
      "bastionVMName": "bastionServer",
      "bastionPrivateIP": "10.0.0.5",
      "adminUsername": "[parameters('adminUsername')]",
      "adminPassword": "[parameters('adminPassword')]",
      "bastionNic": "bastion-nic",
      "bastionNSG": "bastion-nsg",
      "bastionPublicIpName": "bastion-pip",
      "bastionDiagStgAcnt": "[concat('bastionstrg',variables('suffix'))]",
      "bastionVMSize": "[parameters('bastionVMSize')]",
      "bastionDnsLabelPrefix": "[concat('bastionserver',variables('suffix'))]",
      "publisher": "MicrosoftWindowsServer",
      "offer": "WindowsServer",
      "sku": "2012-R2-Datacenter",
      "version": "latest",
      "storageAccountType": "[variables('storageAccountType')]",
      "diagStorageAccountType": "Standard_LRS",
      "wsDiagStgAcnt": "[concat('wsstrg',variables('suffix'))]",
      "publicIpAddressType": "Dynamic",
      "fileUris": "[concat(variables('baseUrl'),'scripts/psscript.ps1')]",
      "scriptFileName": "psscript.ps1",
      "domainName": "[parameters('domainName')]",
      "Username": "[parameters('adminUsername')]",
      "Password": "[parameters('adminPassword')]",
      "wsVmName": "chefworkstation",
      "wsNsg": "ws-client-nsg",
      "wsNic": "ws-client-nic",
      "wsPublicIpName": "ws-publicip",
      "workstationPrivateIP": "10.0.0.6",
      "chefWSVMSize": "[parameters('chefWorkstationVMSize')]",
      "orguser": "[parameters('chefOrgShortName')]",
      "wsClientDns": "[concat('wsclient',variables('suffix'))]",
      "workstationSetup": "[concat(variables('baseUrl'),'scripts/workstationsetup1.ps1')]",
      "workstationextensionurl": "[concat(variables('baseUrl'),'nested/workstation-extension.json')]",
      "workstationSetupUrl2": "[concat(variables('baseUrl'),'scripts/workstationsetup2.ps1')]",
      "domainJoinUrl": "[concat(variables('baseUrl'),'nested/domainjoin.json')]",
      "powerBIUrl": "[concat(variables('baseUrl'),'nested/powerbiinstall.json')]",
      "appScriptUrl": "[concat(variables('baseUrl'),'scripts/powerBIApp.ps1')]",
      "powerBIScriptUrl": "[concat(variables('baseUrl'),'scripts/powerbidesktop.ps1')]",
      "powerBITemplatesUrl": "[concat(variables('dscScriptUrl'),'/powerBItemplates/PowerBI_Templates.zip')]",
      "powerBIDesktopUrl": "https://projectiot.blob.core.windows.net/iotp2/PBIDesktop_x64.msi",
      "appCreationURL": "[concat(variables('baseUrl'),'nested/appCreation.json')]",
      "ManagerAddress": "[variables('ManagerAddress')]",
      "ActivationPort": "[variables('ActivationPort')]",
      "TenantIdentifier": "[variables('TenantIdentifier')]",
      "TenantActivationPassword": "[variables('TenantActivationPassword')]"
    },
    "fortigateFirewallSettings": {
      "location": "[variables('location')]",
      "fortiAvailName": "forti-avset",
      "FGPubFacingAddress": "10.0.0.4",
      "FGDMZAddress": "10.0.1.7",
      "fortiPublicIPAddressName": "forti-pip",
      "publicIPAddressType": "Dynamic",
      "FortiGateName": "fortigate",
      "fortiNicName1": "forti-nic1",
      "fortiNicName2": "forti-nic2",
      "sku": "fortinet_fg-vm",
      "product": "fortinet_fortigate-vm_v5",
      "publisher": "fortinet",
      "fortigateVMSize":"[parameters('fortigateVMSize')]",
      "storageAccountType": "Standard_LRS",
      "fortiDiagStgAcnt": "[concat('fortigate',variables('suffix'))]",
      "adminUsername": "[parameters('adminUsername')]",
      "adminPassword": "[parameters('adminPassword')]",
      "fortiDnsLabelPrefix": "[concat('fortigate',variables('suffix'))]",
      "routeTable1Name": "[concat('fortigate', '-', variables('networkSettings').subnet2Name,'-routes')]",
      "routeTable2Name": "[concat('fortigate', '-', variables('networkSettings').subnet1Name,'-routes')]"
    },
    "mcsModules": {
      "location": "[variables('location')]",
      "adNic": "adNic",
      "adNicIPAddress": "10.0.1.4",
      "adVMName": "adServer",
      "adNsg": "adnsg",
      "adVMSize": "[parameters('adServerVMSize')]",
      "adstorageAccountName": "[concat('adstrg',variables('suffix'))]",
      "Username": "[parameters('adminUsername')]",
      "Password": "[parameters('adminPassword')]",
      "domainName": "[parameters('domainName')]",
      "adExtensionName": "CreateADForest",
      "scriptFileName": "psscript.ps1",
      "publisher": "MicrosoftWindowsServer",
      "offer": "WindowsServer",
      "sku": "2016-Datacenter",
      "version": "latest",
      "chefImagePublisher": "chef-software",
      "chefImageOffer": "chef-automate",
      "chefImageSKU": "byol",
      "chefImageVersion": "latest",
      "chefAutoVmName": "chefautomate",
      "chefAutomateIPAddress": "10.0.1.6",
      "chefAutoNsg": "chefauto-nsg",
      "chefAutoNic": "chefauto-nic",
      "chefAutoDns": "[concat('chefauto',variables('suffix'))]",
      "chefAutoDiagStorageAccountName":"[concat('chefautostrg',variables('suffix'))]",
      "chefAutoScriptUrl1": "[concat(variables('baseUrl'),'scripts/automate_setup.rb')]",
      "firstname": "[parameters('chefUserFirstName')]",
      "lastname": "[parameters('chefUserLastName')]",
      "orguser": "[parameters('chefOrgShortName')]",
      "mailid": "[parameters('chefUserEmail')]",
      "rubyPath": "/opt/chef-marketplace/embedded/bin/ruby",
      "chefVMSize": "[parameters('chefAutomateVMSize')]",
      "automateLicenseUri": "",
      "storageAccountType": "Premium_LRS",
      "diskCreateOption": "empty",
      "diskSizeGB": "1023",
      "trendNSG": "trend-nsg",
      "trendNic": "trend-nic",
      "trendVMName": "trendServer",
      "trendDiagStorageAccountName":"[concat('trendstrg',variables('suffix'))]",
      "trendPublisher": "trendmicro",
      "trendVMSku": "dxxnbyol",
      "trendProduct": "deep-security-vm-byol",
      "trendVMSize": "[parameters('trendVMSize')]",
      "trendNicIPAddress": "[variables('trendNicIPAddress')]",
      "trendsqlServerName": "[concat('trendsql',variables('suffix'))]",
      "sqlDBName": "dsm",
      "dbAdminName": "[parameters('adminUsername')]",
      "dbAdminPassword": "[parameters('adminPassword')]",
      "dsmAdminName": "[parameters('adminUsername')]",
      "dsmAdminPassword": "[parameters('adminPassword')]",
      "databaseOption": "new",
      "licenseMode": "20",
      "managerPort": "443",
      "heartbeatPort": "[variables('heartbeatPort')]",
      "ManagerAddress": "[variables('ManagerAddress')]",
      "ActivationPort": "[variables('ActivationPort')]",
      "TenantIdentifier": "[variables('TenantIdentifier')]",
      "TenantActivationPassword": "[variables('TenantActivationPassword')]",
      "azureSQLUrl": "[concat(variables('baseUrl'),'/nested/database-new.json')]",
      "fileUris": "[concat(variables('baseUrl'),'scripts/psscript.ps1')]",
      "firewalloffscriptName":"firewalloff.ps1",
      "firewalloffscriptUrl":"[concat(variables('baseUrl'),'scripts/firewalloff.ps1')]",
      "dscScriptUrl": "[variables('dscScriptUrl')]",
      "updateVnetDnsUrl": "[concat(variables('baseUrl'), 'nested/vnetdns.json')]"
    },
    "splunkSettings": {
      "location": "[variables('location')]",
      "adminUsername": "[parameters('adminUsername')]",
      "adminPassword": "[parameters('adminPassword')]",
      "splunkNsg": "splunk-nsg",
      "sshFrom": "0.0.0.0/0",
      "forwardedDataFrom": "0.0.0.0/0",
      "splunknetworkInterfaceName": "splunk-nic",
      "splunkprivateIP": "10.0.1.8",
      "splunkVmName": "splunkserver",
      "splunkVMSize": "[parameters('splunkVMSize')]",
      "splunkDiagStorageAccountName":"[concat('splunkstrg',variables('suffix'))]",
      "imagePublisher": "splunk",
      "imageOffer": "splunk-enterprise-base-image",
      "imageSKU": "splunk-on-ubuntu-14-04-lts",
      "imageVersion": "1.1.1",
      "vmExtensionName": "splunkExtension",
      "typeHandlerVersion": "2.0",
      "splunkServerRole": "splunk_server",
      "storageAccountType": "Premium_LRS",
      "customScriptsUrl": "[concat(variables('baseUrl'),'scripts/node-setup.sh')]",
      "ManagerAddress": "[variables('ManagerAddress')]",
      "ActivationPort": "[variables('ActivationPort')]",
      "TenantIdentifier": "[variables('TenantIdentifier')]",
      "TenantActivationPassword": "[variables('TenantActivationPassword')]"
    },
    "piafsqlSettings": {
      "location": "[variables('location')]",
      "adminUsername": "[parameters('adminUsername')]",
      "adminPassword": "[parameters('adminPassword')]",
      "piAFDASQLNic": "sqlNic",
      "piAFDASQLNsg": "sqlNsg",
      "sqlAuthenticationLogin": "[parameters('sqlAdministratorLogin')]",
      "sqlAuthenticationPassword": "[parameters('sqlAdministratorLoginPassword')]",
      "sqlStorageAccountName": "[concat('sqlserver',variables('suffix'))]",
      "piAFDASQLVmName": "PIAFSQLServer",
      "storageAccountType": "Premium_LRS",
      "publisher": "MicrosoftSQLServer",
      "offer": "SQL2016SP1-WS2016",
      "sku": "Express",
      "version": "latest",
      "piAFDASQLVMSize": "[parameters('PIAFDASQLServerVMSize')]",
      "sqlConnectivityType": "Private",
      "sqlPrivateIPAddress": "10.0.1.5",
      "sqlStorageDisksCount": "1",
      "sqlStorageWorkloadType": "GENERAL",
      "sqlAutopatchingDayOfWeek": "Sunday",
      "sqlAutopatchingStartHour": "2",
      "sqlAutopatchingWindowDuration": "60",
      "sqlStorageDeploymentToken": "456",
      "scriptFileName": "psscript.ps1",
      "scriptFileName3": "simulatorsetup.ps1",
      "domainName": "[parameters('domainName')]",
      "Username": "[parameters('adminUsername')]",
      "Password": "[parameters('adminPassword')]",
      "baseUrl": "[variables('baseUrl')]",
      "fileUris": "[concat(variables('baseUrl'),'scripts/psscript.ps1')]",
      "fileUris3": "[concat(variables('baseUrl'),'scripts/simulatorsetup.ps1')]",
      "databaseName": "iottestdb",
      "ManagerAddress": "[variables('ManagerAddress')]",
      "ActivationPort": "[variables('ActivationPort')]",
      "TenantIdentifier": "[variables('TenantIdentifier')]",
      "TenantActivationPassword": "[variables('TenantActivationPassword')]",
      "simulatorUrl": "https://projectiot.blob.core.windows.net/iotp2/SimulatorSetup.msi",
      "dataserviceUrl": "https://projectiot.blob.core.windows.net/iotp2/DataServiceSetup.msi",
      "piWebApiSimulatorUrl": "https://projectiot.blob.core.windows.net/iotp2/PiWebAPISimulatorSetup.msi"
    },
    "pibaServersettings": {
      "adminUsername": "[parameters('adminUsername')]",
      "adminPassword": "[parameters('adminPassword')]",
      "location": "[variables('location')]",
      "piBAVMName": "PIBAVMServer",
      "piBANic": "PIBAVMNic",
      "piBANsg": "PIBANsg",
      "piBADiagStgAcnt": "[concat('pibavm',variables('suffix'))]",
      "publisher": "MicrosoftWindowsServer",
      "offer": "WindowsServer",
      "sku": "2012-R2-Datacenter",
      "version": "latest",
      "piBAVMSize": "[parameters('PIBAServerVMSize')]",
      "storageAccountType": "[variables('storageAccountType')]",
      "diagStorageAccountType": "Standard_LRS",
      "piBAPrivateIPAddress": "10.0.1.11",
      "scriptFileName": "psscript.ps1",
      "domainName": "[parameters('domainName')]",
      "fileUris": "[concat(variables('baseUrl'),'scripts/psscript.ps1')]",
      "Username": "[parameters('adminUsername')]",
      "Password": "[parameters('adminPassword')]",
      "domainJoinUrl": "[concat(variables('baseUrl'),'nested/domainjoin.json')]",
      "ManagerAddress": "[variables('ManagerAddress')]",
      "ActivationPort": "[variables('ActivationPort')]",
      "TenantIdentifier": "[variables('TenantIdentifier')]",
      "TenantActivationPassword": "[variables('TenantActivationPassword')]"
    },
    "azureSQL": {
      "location": "[variables('location')]",
      "sqlAuthenticationLogin": "[parameters('sqlAdministratorLogin')]",
      "sqlAuthenticationPassword": "[parameters('sqlAdministratorLoginPassword')]",
      "collation": "SQL_Latin1_General_CP1_CI_AS",
      "databaseName": "azuredb",
      "edition": "Standard",
      "requestedServiceObjectiveName": "S2",
      "maxSizeBytes": "268435456000",
      "serverName": "[concat('sqlserver',variables('suffix'))]",
      "storageKeyType": "SharedAccessKey",
      "storageKey": "?",
      "storageUri": "https://projectiot.blob.core.windows.net/iotp2/EnergyManagement.bacpac"
    },
    "mlSettings": {
      "location": "South Central US",
      "workspaceName": "workspace",
      "mlSkuName": "[parameters('MLskuName')]",
      "mlStorageName": "[concat('mlstr', variables('suffix'))]"
    },
    "webSiteSettings": {
      "location": "[variables('location')]",
      "jobCollectionName": "[concat('myjob', variables('suffix'))]",
      "webjobStorageName": "[concat('webjobstr',variables('suffix'))]",
      "webjobStorageType": "Standard_LRS",
      "hostingPlanName": "AppServPlan",
      "skuName": "[parameters('skuName')]",
      "skuCapacity": "[parameters('skuCapacity')]",
      "webSiteName": "[parameters('websiteName')]",
      "WebAppPackageURI": "[concat(variables('webAppDeployPackageURI'), variables('sasToken'))]",
      "blobconnectionString": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('deployStorageAccountName'),';AccountKey=',variables('deployStorageAccountKey'))]",
      "apiServerName": "[concat('apiserver',variables('suffix'))]",
      "b2cClientId": "[parameters('b2cClientId')]",
      "b2cSignInPolicyId": "[parameters('b2cSignInPolicyId')]",
      "b2cSignUpPolicyId": "[parameters('b2cSignUpPolicyId')]",
      "b2cEditProfilePolicyId": "[parameters('b2cEditProfilePolicyId')]",
      "b2cTenant": "[parameters('b2cTenant')]",
      "b2cClientSecret": "[parameters('b2cClientSecret')]",
      "b2cChangePasswordPolicy": "[parameters('b2cChangePasswordPolicy')]",
      "emailHost": "[parameters('emailHost')]",
      "emailHostPort": "[parameters('emailHostPort')]",
      "senderEmail": "[parameters('senderEmail')]",
      "senderEmailPassword": "[parameters('senderEmailPassword')]",
      "websiteFullAddress": "[variables('websiteFullAddress')]",
      "b2cAadInstance": "https://login.microsoftonline.com/{0}/v2.0/.well-known/openid-configuration?p={1}",
      "notificationIcon": "./csu/Assets/logo.png",
      "anomalyThreshold": "0.6",
      "meterKWHCost": "0.04",
      "databaseConnString": "[concat('data source=',variables('azureSQL').serverName,'.database.windows.net;initial catalog=',variables('azureSQL').databaseName,';persist security info=True;user id=',parameters('sqlAdministratorLogin'),';password=',parameters('sqlAdministratorLoginPassword'))]",
      "notificationClickAction": "[variables('websiteFullAddress')]",
      "restServerPackageURI": "[concat(variables('restServerDeployPackageURI'), variables('sasToken'))]",
      "powerGridEntities": "[concat('metadata=res://*/Entities.PowergridModel.csdl|res://*/Entities.PowergridModel.ssdl|res://*/Entities.PowergridModel.msl;provider=System.Data.SqlClient;provider connection string=\"data source=',variables('azureSQL').serverName,'.database.windows.net;initial catalog=',variables('azureSQL').databaseName,';persist security info=True;user id=',parameters('sqlAdministratorLogin'),';password=',parameters('sqlAdministratorLoginPassword'),';multipleactiveresultsets=True;application name=EntityFramework\"')]"
    },
    "backupSettings": {
      "backupFabric": "Azure",
      "v2VmType": "Microsoft.Compute/virtualMachines",
      "v2VmContainer": "iaasvmcontainer;iaasvmcontainerv2;",
      "v2Vm": "vm;iaasvmcontainerv2;",
      "existingRecoveryServicesVault": "[concat('iotvault',variables('suffix'))]",
      "existingBackupPolicy": "iotpolicy",
      "scheduleRunTimes": ["03:00"],
      "dailyRetentionDurationCount": 30,
      "existingVirtualMachinesResourceGroup": "[resourceGroup().name]",
      "existingVirtualMachines": [
        "bastionServer",
        "splunkserver",
        "adServer",
        "PIAFSQLServer",
        "PIBAVMServer",
        "trendServer",
        "chefworkstation",
        "chefautomate"
      ]
    },
    "routeTable1Id": "[resourceId('Microsoft.Network/routeTables',variables('fortigateFirewallSettings').routeTable1Name)]",
    "routeTable2Id": "[resourceId('Microsoft.Network/routeTables',variables('fortigateFirewallSettings').routeTable2Name)]",
    "trendNicIPAddress": "10.0.1.10",
    "heartbeatPort": "4120",
    "ManagerAddress": "[variables('trendNicIPAddress')]",
    "ActivationPort": "[variables('heartbeatPort')]",
    "TenantIdentifier": "NA",
    "TenantActivationPassword": "NA",
    "location": "[resourceGroup().location]",
    "websiteFullAddress": "[concat('https://',parameters('websiteName'),'.azurewebsites.net/')]",
    "deployStorageAccountName": "releasemtr",
    "deployStorageAccountKey": "",
    "webAppDeployPackageURI": "https://projectiot.blob.core.windows.net/iotp2/CSUWebApp.zip",
    "restServerDeployPackageURI": "https://projectiot.blob.core.windows.net/iotp2/RestService.zip",
    "sasToken": "?",
    "dnsServerAddress": "10.0.1.4",
    "storageAccountType": "Premium_LRS",
    "baseUrl": "https://raw.githubusercontent.com/sysgain/iot-automation/firewall/",
    "dscScriptUrl": "https://github.com/sysgain/iot-automation/raw/firewall",
    "deploymentApiVersion": "2016-02-01",
    "suffix": "[substring(uniqueString(resourceGroup().id), 0, 5)]"
  },
  "resources": [
    {
      "type": "Microsoft.Network/routeTables",
      "name": "[variables('fortigateFirewallSettings').routeTable1Name]",
      "apiVersion": "[variables('apiVersions').routtableApiVersion]",
      "location": "[variables('fortigateFirewallSettings').location]",
      "properties": {
        "routes": [
          {
            "name": "[concat('to', '-', variables('networkSettings').subnet2Name)]",
            "properties": {
              "addressPrefix": "[variables('networkSettings').subnet2Prefix]",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[variables('fortigateFirewallSettings').FGPubFacingAddress]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/routeTables",
      "name": "[variables('fortigateFirewallSettings').routeTable2Name]",
      "apiVersion": "[variables('apiVersions').routtableApiVersion]",
      "location": "[variables('fortigateFirewallSettings').location]",
      "properties": {
        "routes": [
          {
            "name": "[concat('to', '-', variables('networkSettings').subnet1Name)]",
            "properties": {
              "addressPrefix": "[variables('networkSettings').subnet1Prefix]",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[variables('fortigateFirewallSettings').FGDMZAddress]"
            }
          },
          {
            "name": "to-Internet",
            "properties": {
              "AddressPrefix": "0.0.0.0/0",
              "nextHopType": "VirtualAppliance",
              "nextHopIPAddress": "[variables('fortigateFirewallSettings').FGDMZAddress]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('networkSettings').virtualNetworkName]",
      "apiVersion": "[variables('apiVersions').networkApiVersion]",
      "location": "[variables('networkSettings').location]",
      "dependsOn": [
        "[concat('Microsoft.Network/routeTables/', variables('fortigateFirewallSettings').routeTable1Name)]",
        "[concat('Microsoft.Network/routeTables/', variables('fortigateFirewallSettings').routeTable2Name)]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('networkSettings').addressPrefix]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('networkSettings').subnet1Name]",
            "properties": {
              "addressPrefix": "[variables('networkSettings').subnet1Prefix]"
            }
          },
          {
            "name": "[variables('networkSettings').subnet2Name]",
            "properties": {
              "addressPrefix": "[variables('networkSettings').subnet2Prefix]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "name": "fortigateServer",
      "apiVersion": "[variables('deploymentApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/',variables('networkSettings').virtualNetworkName)]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('baseUrl'), 'nested/fortigate.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "fortigateFirewallSettings": {
            "value": "[variables('fortigateFirewallSettings')]"
          },
          "networkSettings": {
            "value": "[variables('networkSettings')]"
          },
          "apiVersions": {
            "value": "[variables('apiVersions')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "name": "AppComponents",
      "apiVersion": "[variables('deploymentApiVersion')]",
      "dependsOn": [],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('baseUrl'), 'nested/appComponents.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "azureSQL": {
            "value": "[variables('azureSQL')]"
          },
          "mlSettings": {
            "value": "[variables('mlSettings')]"
          },
          "webSiteSettings": {
            "value": "[variables('webSiteSettings')]"
          },
          "apiVersions": {
            "value": "[variables('apiVersions')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "name": "mcsModules",
      "apiVersion": "[variables('deploymentApiVersion')]",
      "dependsOn": [
        "fortigateServer",
        "[concat('Microsoft.Network/virtualNetworks/',variables('networkSettings').virtualNetworkName)]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('baseUrl'), 'nested/mcs.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "mcsModules": {
            "value": "[variables('mcsModules')]"
          },
          "networkSettings": {
            "value": "[variables('networkSettings')]"
          },
          "apiVersions": {
            "value": "[variables('apiVersions')]"
          },
          "dnsServerAddress": {
            "value": [
              "[variables('dnsServerAddress')]"
            ]
          },
          "splunkSettings": {
            "value": "[variables('splunkSettings')]"
          },
          "routeTable1Id": {
            "value": "[variables('routeTable1Id')]"
          },
          "routeTable2Id": {
            "value": "[variables('routeTable2Id')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "name": "BastionHost",
      "apiVersion": "[variables('deploymentApiVersion')]",
      "dependsOn": [
        "mcsModules"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('baseUrl'), 'nested/bastionServer.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "bastionServerSettings": {
            "value": "[variables('bastionServerSettings')]"
          },
          "networkSettings": {
            "value": "[variables('networkSettings')]"
          },
          "apiVersions": {
            "value": "[variables('apiVersions')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "name": "PIComponents",
      "apiVersion": "[variables('deploymentApiVersion')]",
      "dependsOn": [
        "mcsModules"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('baseUrl'), 'nested/piComponents.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "piafsqlSettings": {
            "value": "[variables('piafsqlSettings')]"
          },
          "pibaServersettings": {
            "value": "[variables('pibaServersettings')]"
          },
          "networkSettings": {
            "value": "[variables('networkSettings')]"
          },
          "apiVersions": {
            "value": "[variables('apiVersions')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "name": "WorkStation",
      "apiVersion": "[variables('deploymentApiVersion')]",
      "dependsOn": [
        "BastionHost",
        "PIComponents",
        "mcsModules"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('baseUrl'), 'nested/workStationServer.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "bastionServerSettings": {
            "value": "[variables('bastionServerSettings')]"
          },
          "networkSettings": {
            "value": "[variables('networkSettings')]"
          },
          "apiVersions": {
            "value": "[variables('apiVersions')]"
          },
          "mcsModules": {
            "value": "[variables('mcsModules')]"
          },
          "piafsqlSettings": {
            "value": "[variables('piafsqlSettings')]"
          },
          "pibaServersettings": {
            "value": "[variables('pibaServersettings')]"
          },
          "splunkSettings": {
            "value": "[variables('splunkSettings')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "name": "IAASBackup",
      "apiVersion": "[variables('deploymentApiVersion')]",
      "dependsOn": [
        "WorkStation"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('baseUrl'), 'nested/backup.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "backupSettings": {
            "value": "[variables('backupSettings')]"
          },
          "apiVersions": {
            "value": "[variables('apiVersions')]"
          }
        }
      }
    }
  ],
  "outputs": {
    "adminUsername": {
      "type": "string",
      "value": "[parameters('adminUserName')]"
    },
    "bastionFQDN": {
      "type": "string",
      "value": "[reference('BastionHost').outputs.bastionFQDN.value]"
    },
    "adServerIPAddress": {
      "type": "string",
      "value": "[variables('mcsModules').adNicIPAddress]"
    },
    "piafSQLServerIPAddress": {
      "type": "string",
      "value": "[variables('piafsqlSettings').sqlPrivateIPAddress]"
    },
    "pibaServerIPAddress": {
      "type": "string",
      "value": "[variables('pibaServersettings').piBAPrivateIPAddress]"
    },
    "workstationFQDN": {
      "type": "string",
      "value": "[reference('WorkStation').outputs.workstationFQDN.value]"
    },
    "chefAutomateIPAddress": {
      "type": "string",
      "value": "[variables('mcsModules').chefAutomateIPAddress]"
    },
    "chefAutomateLoginUsername": {
      "type": "string",
      "value": "[parameters('adminUserName')]"
    },
    "trendIPAddress": {
      "type": "string",
      "value": "[variables('trendNicIPAddress')]"
    },
    "trendWebUIUsername": {
      "type": "string",
      "value": "[parameters('adminUserName')]"
    },
    "splunkIPAddress": {
      "type": "string",
      "value": "[variables('splunkSettings').splunkprivateIP]"
    },
    "splunkWebUIUsername": {
      "type": "string",
      "value": "admin"
    },
    "fortigateFQDN": {
      "type": "string",
      "value": "[variables('fortigateFirewallSettings').fortiDnsLabelPrefix]"
    },
    "azureSQLEndpoint": {
      "type": "string",
      "value": "[reference('AppComponents').outputs.azureSQLServerName.value]"
    },
    "azureSQLDBName": {
      "type": "string",
      "value": "[reference('AppComponents').outputs.azureDBName.value]"
    },
    "azureSQLUsername": {
      "type": "string",
      "value": "[parameters('sqlAdministratorLogin')]"
    },
    "windowsSQLUsername": {
      "type": "string",
      "value": "[parameters('sqlAdministratorLogin')]"
    },
    "webjobStorageaccntName": {
      "type": "string",
      "value": "[variables('webSiteSettings').webjobStorageName]"
    },
    "webSiteUrl": {
      "type": "string",
      "value": "[variables('websiteFullAddress')]"
    }
  }
}
